function get_bytes(obj) {
  var bytes = [];
  var pc = -1;
  obj.dump.forEach(function (entry) {
    if (!entry.lens) return;
    /* Initialize the PC if not initialized yet */
    if (pc == -1) {
      pc = entry.addr;
    } else if (pc < entry.addr) {
      /* Gap between current PC and the instruction address */
      for (var i = 0; i < entry.addr - pc; i++) {
        bytes.push(0x00);
      }
      pc = entry.addr;
    }
    /* Concat the two arrays */
    bytes.push(...entry.lens);
    pc += entry.lens.length;
  });
  return bytes;
}

async function assemble() {
  const code = editor.getValue();

  // clear previous errors, if any
  editor.clearErrors();

  async function readFile(path) {
    const { text } = await explorer.readFile(path);
    return text;
  }

  try {
    const result = await ASM.compile(code, { readFile }, { assembler: 'z80' });
    console.log('Assembly Result:', result);
    document.getElementById('log').className = 'log';
    document.getElementById('log').textContent = 'Assembly successful. Generated bytes:';

    const list = ASM.lst(result, true, true);

    const bytes = get_bytes(result);
    const hexView = document.getElementById('hex-view');
    const listView = document.getElementById('list-view');
    const hex = bytes
      .map((b, i) => {
        const byte = b.toString(16).padStart(2, '0');
        // Add a newline after every 16th byte, except the last one
        return (i + 1) % 16 === 0 ? byte + '\n' : byte + ' ';
      })
      .join('');

    hexView.textContent = hex;
    listView.textContent = list;
    return bytes;
  } catch (e) {
    const error = e.error;
    document.getElementById('log').className = 'log error';
    if (error.s) {
      console.warn(error);
      /* If the error comes from an included file, `error.s.includedFile` is defined  */
      let file = error.s.includedFile || editor.editor.fileName;
      document.getElementById('log').textContent = `❌ Error ${file}:${error.s.numline}: ${error.msg}`;
      /* If the error is in an included file, show the include as the error */
      let line = error.s.includedFileAtLine || error.s.numline;
      editor.gotoLine(line - 1, { error: true });
    } else {
      document.getElementById('log').textContent = '❌ Error: ' + error.msg;
    }
    console.error('❌ Assembly Error:', error);
    return [];
  }
}
