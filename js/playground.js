const DEFAULT_CODE = `    ; Write your Z80 code here

`;

const editor = document.getElementById('editor');
const explorer = document.getElementById('explorer');
const emulator = document.getElementById('emulator');

window.addEventListener('load', () => {
  editor.open({
    name: 'hello.asm',
    path: 'examples/hello.asm',
    text: `  ; Hello World Example
start:
  ld hl, message
print_loop:
  ld a, (hl)
  or a
  jr z, print_done
  cp 0x0A   ; newline
  jr nz, print_char
  ld a, 0x01
  out (0xA9), a
  jr print_next
print_char:
  out (0xA0), a
print_next:
  inc hl
  jr print_loop
print_done:
  jr $

message: .cstr "hello\\nworld"`,
  });
});

explorer.addEventListener('open-file', (e) => {
  console.log('open-file', e);
  editor.open(e.detail);
});

function get_bytes(obj) {
  var bytes = [];
  obj.dump.forEach(function (entry) {
    if (!entry.lens) return;
    /* Concat the two arrays */
    bytes.push(...entry.lens);
  });
  return bytes;
}

async function assemble() {
  const code = editor.getValue();
  try {
    const result = await ASM.compile(code, { readFile: () => 0 }, { assembler: 'z80' });
    console.log('Assembly Result:', result);
    document.getElementById('log').className = 'log';
    document.getElementById('log').textContent = 'Assembly successful. Generated bytes:';
    const bytes = get_bytes(result);
    document.getElementById('hex-view').textContent = bytes.map((b) => b.toString(16).padStart(2, '0')).join(' ');
    return bytes;
  } catch (e) {
    const error = e.error;
    document.getElementById('log').className = 'log error';
    if (error.s) {
      document.getElementById('log').textContent = `❌ Error on line ${error.s.numline}: ${error.msg}`;
    } else {
      document.getElementById('log').textContent = '❌ Error: ' + error.msg;
    }
    console.error('❌ Assembly Error:', error);
    return [];
  }
}

async function code_run() {
  const bytes = await assemble();
  console.log(bytes);
  /* If we have some bytes, load them to the VFS */
  const data = new Uint8Array(bytes);

  emulator.reload(data);
}

async function code_stop() {
  emulator.stop();
}
