const DEFAULT_CODE = `    ; Write your Z80 code here\n\n`;

const viewport = document.getElementById('viewport');
// const container = document.getElementById('top-panel');
const editor = document.getElementById('editor');
const explorer = document.getElementById('explorer');
const emulator = document.getElementById('emulator');
const editorResizers = document.querySelectorAll('.resize-column');

function prefs_reset_layout() {
  console.log('prefs', 'reset layout');
  localStorage.removeItem('container-layout');
  viewport.style.removeProperty('--editor-width');
}

window.addEventListener('load', () => {
  explorer.openFile('hello.asm', 'examples/hello.asm');
});

explorer.addEventListener('open-file', (e) => {
  console.log('open-file', e);
  editor.openFile(e.detail);
});

explorer.addEventListener('new-file', (e) => {
  console.log('new-file', e);
  editor.openFile({
    name: undefined,
    text: ` ; Write your code here\n\n`,
  });
});

editor.addEventListener('file-saved', (e) => {
  console.log('file-saved');
  explorer.refreshUser();
});

function get_bytes(obj) {
  var bytes = [];
  obj.dump.forEach(function (entry) {
    if (!entry.lens) return;
    /* Concat the two arrays */
    bytes.push(...entry.lens);
  });
  return bytes;
}

async function assemble() {
  const code = editor.getValue();
  try {
    const result = await ASM.compile(code, { readFile: () => 0 }, { assembler: 'z80' });
    console.log('Assembly Result:', result);
    document.getElementById('log').className = 'log';
    document.getElementById('log').textContent = 'Assembly successful. Generated bytes:';
    const bytes = get_bytes(result);
    document.getElementById('hex-view').textContent = bytes.map((b) => b.toString(16).padStart(2, '0')).join(' ');
    return bytes;
  } catch (e) {
    const error = e.error;
    document.getElementById('log').className = 'log error';
    if (error.s) {
      document.getElementById('log').textContent = `❌ Error on line ${error.s.numline}: ${error.msg}`;
    } else {
      document.getElementById('log').textContent = '❌ Error: ' + error.msg;
    }
    console.error('❌ Assembly Error:', error);
    return [];
  }
}

async function code_run() {
  const bytes = await assemble();
  console.log(bytes);
  /* If we have some bytes, load them to the VFS */
  const data = new Uint8Array(bytes);

  emulator.reload(data);
}

async function code_stop() {
  emulator.stop();
}

(() => {
  let resizing = false;
  let col1w_start, col2w_start;
  let window_width = window.innerWidth;
  let startX;
  const minWidth = 320;

  function setColumns(col1, col2) {
    viewport.style.setProperty('--editor-width', `${col1}px`);
    localStorage.setItem('container-layout', col1);
  }

  window.addEventListener('resize', (e) => {
    if (window.innerWidth < window_width) {
      console.log('shrinking...');
    }
    window_width = window.innerWidth;
  });

  window.addEventListener('load', (e) => {
    const containerLayout = localStorage.getItem('container-layout');
    if (containerLayout && containerLayout.trim().length) {
      [col1w_start, col2w_start] = containerLayout.split(' ');
      setColumns(col1w_start, col2w_start);
    }
  });

  editorResizers.forEach((resizer) =>
    resizer.addEventListener('mousedown', (e) => {
      resizing = true;
      startX = e.clientX;

      const styles = window.getComputedStyle(viewport);
      const cols = styles.gridTemplateColumns.split(' ');
      col1w_start = parseFloat(cols[2]);
      col2w_start = parseFloat(cols[4]);
    }),
  );

  document.addEventListener('mouseup', (e) => {
    resizing = false;
  });
  document.addEventListener('mousemove', (e) => {
    if (!resizing) return;
    e.preventDefault();
    e.stopPropagation();

    const dx = e.clientX - startX;

    let col1w_new = col1w_start + dx;
    let col2w_new = col2w_start - dx;

    if (col1w_new < minWidth) {
      col2w_new -= minWidth - col1w_new;
      col1w_new = minWidth;
    }
    if (col2w_new < minWidth) {
      col1w_new -= minWidth - col2w_new;
      col2w_new = minWidth;
    }

    setColumns(col1w_new, col2w_new);
  });
})();
